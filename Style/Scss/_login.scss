/* === start of variable === */
$text-primary: white;
$border-primary: rgba(255, 255, 255, 0.2);
$neon-primary: #00f7ff;
/* === end of variable === */
/* === start of section === */
.bg-night {
  background-color: black;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.login-box {
  & {
    position: relative;
    color: $text-primary;
    background: rgba($color: $text-primary, $alpha: 0.1);
    padding: 4rem 3rem;
    border-radius: 1rem;
  }

  .lamp {
    transition: 0.3s ease;
    position: fixed;
    top: 0px;
    left: 50%;
    transform: translate(-50%, 0%);
    padding: 0.25rem 15rem;
  }

  .input-check:checked ~ .lamp {
    background-color: $neon-primary;
  }

  .lamp::before {
    content: " ";
    position: absolute;
    top: -80rem;
    transform: translate(-50%, 0);
    width: 100%;
    height: 70rem;
    background: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0.3) -50%,
      rgba(255, 255, 255, 0) 90%
    );
    clip-path: polygon(20% 0, 80% 0, 100% 100%, 0 100%);
    pointer-events: none;
    transition: 0.5s ease;
  }

  .input-check:checked ~ .lamp::before {
    top: 0rem;
  }

  .my-toggle {
    position: absolute;
    top: 2rem;
    right: -5rem;
    width: 4rem;
    height: 8rem;
    background-color: #191919;
    border-radius: 0.5rem;
  }

  .remember-forgot {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }

  .text-sm {
    font-size: 14px;
  }

  .my-toggle::before {
    content: " ";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 0.5rem;
    height: 6rem;
    background-color: black;
  }

  .my-toggle::after {
    content: " ";
    position: absolute;
    top: 0.5rem;
    left: 50%;
    transform: translate(-50%, 0);
    width: 2.8rem;
    height: 2.8rem;
    background-color: #333333;
    border: 2px solid #191919;
    border-radius: 0.5rem;
    cursor: pointer;
    box-shadow: 0 0 0.5rem rgba($color: #000000, $alpha: 0.5);
    transition: 0.5s ease;
  }

  .my-toggle .text {
    position: absolute;
    top: 1.1rem;
    left: 50%;
    transform: translate(-50%, 0);
    color: $text-primary;
    font-size: 1rem;
    z-index: 1;
    transition: 0.5s;
    cursor: pointer;
  }

  .my-toggle .off {
    opacity: 1;
  }

  .input-check:checked ~ .my-toggle .off {
    transform: translate(-0.8rem, 4.2rem);
    opacity: 0;
  }

  .my-toggle .on {
    opacity: 0;
  }

  .input-check:checked ~ .my-toggle .on {
    transform: translate(-0.8rem, 4.2rem);
    opacity: 1;
    color: $neon-primary;
    text-shadow: 0 0 1rem $neon-primary, 0 0 2rem $neon-primary,
      0 0 3rem $neon-primary, 0 0 4rem $neon-primary;
  }

  .input-check {
    position: absolute;
    right: -5rem;
    z-index: 1;
    opacity: 0;
  }

  .input-check:checked ~ .my-toggle::after {
    top: 4.7rem;
  }

  .input-box input {
    transition: 0.5s ease;
    width: 100%;
    color: $text-primary;
    background-color: transparent;
    border: none;
    border-bottom: 2px solid $text-primary;
  }

  .input-box input:focus {
    color: $text-primary;
    background-color: transparent;
    border: none;
    border-bottom: 2px solid $text-primary;
    outline: none;
  }

  .input-check:checked ~ .input-box input {
    color: $neon-primary;
    text-shadow: 0 0 0.5rem $neon-primary;
  }

  .input-box label {
    transition: 0.5s ease;
    text-align: start;
    transform: translate(0rem, -2.5rem);
    margin-top: 0.5rem;
  }

  .input-box input:focus ~ label,
  .input-box input:valid ~ label,
  .input-box input:user-invalid ~ label {
    transition: 0.5s ease;
    transform: translate(0rem, -3.7rem);
  }

  .input-check:checked ~ .input-box label {
    color: $neon-primary;
    text-shadow: 0 0 0.5rem $neon-primary;
  }

  .input-box i {
    transition: 0.5s ease;
    position: absolute;
    right: 3rem;
    font-size: large;
  }

  .input-box:hover i {
    transform: scale(120%);
  }

  a,
  p,
  input,
  label {
    transition: 0.5s ease;
    color: $text-primary;
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }

  .bold {
    font-weight: bold;
  }

  .input-check:checked ~ .remember-forgot label,
  .input-check:checked ~ .remember-forgot a,
  .input-check:checked ~ .register p,
  .input-check:checked ~ .register p a,
  .input-check:checked ~ .input-box i {
    color: $neon-primary;
    text-shadow: 0 0 0.5rem $neon-primary;
  }

  .btn {
    transition: 0.5s ease;
    color: black;
    width: 100%;
    margin: 1rem 0rem;
  }

  .input-check:checked ~ .btn {
    color: black;
    background-color: $neon-primary;
    text-shadow: 0 0 0.5rem $neon-primary;
    box-shadow: 0 0 1rem $neon-primary;
  }

  h2 {
    transition: 0.5s ease;
    font-size: 2rem;
    color: $text-primary;
    font-weight: bold;
  }

  .input-check:checked ~ h2 {
    color: $neon-primary;
    text-shadow: 0 0 1rem $neon-primary, 0 0 2rem $neon-primary;
  }
}

.checkbox-wrapper-33 {
  --s-xsmall: 0.4rem;
  --s-small: 0.5rem;
  --border-width: 1px;
  --c-primary: #00f7ff;
  --c-primary-20-percent-opacity: rgb(95 17 232 / 20%);
  --c-primary-10-percent-opacity: rgb(95 17 232 / 10%);
  --t-base: 0.4s;
  --t-fast: 0.2s;
  --e-in: ease-in;
  --e-out: cubic-bezier(0.11, 0.29, 0.18, 0.98);
}

.checkbox-wrapper-33 .visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.checkbox-wrapper-33 .checkbox {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}
.checkbox-wrapper-33 .checkbox + .checkbox {
  margin-top: var(--s-small);
}
.checkbox-wrapper-33 .checkbox__symbol {
  display: inline-block;
  display: flex;
  margin-right: calc(var(--s-small) * 0.7);
  border: var(--border-width) solid var(--c-primary);
  position: relative;
  border-radius: 0.1em;
  width: 1.2em;
  height: 1.2em;
  transition: box-shadow var(--t-base) var(--e-out),
    background-color var(--t-base);
  box-shadow: 0 0 0 0 var(--c-primary-10-percent-opacity);
}
.checkbox-wrapper-33 .checkbox__symbol:after {
  content: "";
  position: absolute;
  top: 0.5em;
  left: 0.5em;
  width: 0.25em;
  height: 0.25em;
  background-color: var(--c-primary-20-percent-opacity);
  opacity: 0;
  border-radius: 3em;
  transform: scale(1);
  transform-origin: 50% 50%;
}
.checkbox-wrapper-33 .checkbox .icon-checkbox {
  width: 1em;
  height: 1em;
  margin: auto;
  fill: none;
  stroke-width: 3;
  stroke: currentColor;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-miterlimit: 10;
  color: var(--c-primary);
  display: inline-block;
}
.checkbox-wrapper-33 .checkbox .icon-checkbox path {
  transition: stroke-dashoffset var(--t-fast) var(--e-in);
  stroke-dasharray: 30px, 31px;
  stroke-dashoffset: 31px;
}
.checkbox-wrapper-33 .checkbox__textwrapper {
  margin: 0;
}
.checkbox-wrapper-33 .checkbox__trigger:checked + .checkbox__symbol:after {
  -webkit-animation: ripple-33 1.5s var(--e-out);
  animation: ripple-33 1.5s var(--e-out);
}
.checkbox-wrapper-33
  .checkbox__trigger:checked
  + .checkbox__symbol
  .icon-checkbox
  path {
  transition: stroke-dashoffset var(--t-base) var(--e-out);
  stroke-dashoffset: 0px;
}
.checkbox-wrapper-33 .checkbox__trigger:focus + .checkbox__symbol {
  box-shadow: 0 0 0 0.25em var(--c-primary-20-percent-opacity);
}

@-webkit-keyframes ripple-33 {
  from {
    transform: scale(0);
    opacity: 1;
  }
  to {
    opacity: 0;
    transform: scale(20);
  }
}

@keyframes ripple-33 {
  from {
    transform: scale(0);
    opacity: 1;
  }
  to {
    opacity: 0;
    transform: scale(20);
  }
}
/* === end of section === */
/* === start of function === */

/* === end of function === */
